service: import-service
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1

  environment:
    SQS_URL:
      Ref: CatalogItemsQueue

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::potatoes-uploads/uploads"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::potatoes-uploads/uploads/*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::potatoes-uploads/parsed/*"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        Fn::GetAtt:
          - CatalogItemsQueue
          - Arn

plugins:
  - serverless-bundle

functions:
  import-products:
    handler: src/functions/products.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          authorizer:
            name: BasicAuthorizer
            arn:
              Fn::ImportValue: BasicAuthorizerArn
          request:
            parameters:
              querystrings:
                name: true

  import-parser:
    handler: src/functions/parser.importFileParser
    events:
      - s3:
          bucket: potatoes-uploads
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
          existing: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: potatoes-queue
    CreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: potatoes-sns
    BYSNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        FilterPolicy:
          type:
            - by
        Endpoint: viktar_parashchanka@epam.com
        Protocol: email
        TopicArn:
          Ref: CreateProductTopic
    RUSNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        FilterPolicy:
          type:
            - ru
        Endpoint: gxvint@gmail.com
        Protocol: email
        TopicArn:
          Ref: CreateProductTopic

  Outputs:
    SQSPotatoes:
      Export:
        Name: SQSPotatoesARN
      Value:
        Fn::GetAtt: CatalogItemsQueue.Arn
    SNSPotatoes:
      Export:
        Name: SNSPotatoesTopicARN
      Value:
        Ref: CreateProductTopic

custom:
  documentation:
    version: '1'
    title: 'My API'
    description: 'This is my API'
    models: { }

